services:
  api-checkitout:
    image: "ghcr.io/rin-yato/checkitout-api:prod"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api-checkitout.rinyato.com`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.docker.network=proxy"
    env_file:
      - .env
    networks:
      - proxy
    deploy:
      mode: replicated
      replicas: 2
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      keydb:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    environment:
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    expose:
      - 5432
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data:rw
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 3s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - proxy

  keydb:
    image: "eqalpha/keydb:arm64_v6.3.3"
    command: keydb-server /etc/keydb/keydb.conf
    ports:
      - 6379:6379
    volumes:
      - keydb:/data
      - ./keydb.conf:/etc/keydb/keydb.conf
    healthcheck:
      test: ["CMD-SHELL", "keydb-cli -a $REDIS_PASSWORD PING | grep PONG"]
      interval: 3s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - proxy

volumes:
  postgres:
  keydb:
  letsencrypt:

networks:
  proxy:
    external: true
