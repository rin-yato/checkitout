services:
  watchtower:
    image: containrrr/watchtower
    environment:
      - REPO_USER=${GHCR_USER}
      - REPO_PASS=${GHCR_PASS}
    command:
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  traefik:
    image: "traefik:v3.1"
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=chearithorn@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock

  api:
    image: "ghcr.io/rin-yato/checkitout-api:prod"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api-checkitout.rinyato.com`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "com.centurylinklabs.watchtower.enable=true"
    env_file:
      - .env
    deploy:
      mode: replicated
      replicas: 3
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      dragonfly:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    environment:
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    expose:
      - 5432
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data:rw
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  dragonfly:
    image: "docker.dragonflydb.io/dragonflydb/dragonfly"
    ulimits:
      memlock: -1
    command:
      - "--cluster_mode=emulated"
      - "--lock_on_hashtags"
    environment:
      - DFLY_requirepass=${DFLY_requirepass}
    expose:
      - 6379
    volumes:
      - dragonfly:/data
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres:
  dragonfly:
  letsencrypt:
